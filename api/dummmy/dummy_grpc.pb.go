// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: dummmy/dummy.proto

package dummmy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dummy_CreateDummy_FullMethodName = "/api.dummmy.Dummy/CreateDummy"
	Dummy_UpdateDummy_FullMethodName = "/api.dummmy.Dummy/UpdateDummy"
	Dummy_DeleteDummy_FullMethodName = "/api.dummmy.Dummy/DeleteDummy"
	Dummy_GetDummy_FullMethodName    = "/api.dummmy.Dummy/GetDummy"
	Dummy_ListDummy_FullMethodName   = "/api.dummmy.Dummy/ListDummy"
)

// DummyClient is the client API for Dummy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyClient interface {
	CreateDummy(ctx context.Context, in *CreateDummyRequest, opts ...grpc.CallOption) (*CreateDummyReply, error)
	UpdateDummy(ctx context.Context, in *UpdateDummyRequest, opts ...grpc.CallOption) (*UpdateDummyReply, error)
	DeleteDummy(ctx context.Context, in *DeleteDummyRequest, opts ...grpc.CallOption) (*DeleteDummyReply, error)
	GetDummy(ctx context.Context, in *GetDummyRequest, opts ...grpc.CallOption) (*GetDummyReply, error)
	ListDummy(ctx context.Context, in *ListDummyRequest, opts ...grpc.CallOption) (*ListDummyReply, error)
}

type dummyClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyClient(cc grpc.ClientConnInterface) DummyClient {
	return &dummyClient{cc}
}

func (c *dummyClient) CreateDummy(ctx context.Context, in *CreateDummyRequest, opts ...grpc.CallOption) (*CreateDummyReply, error) {
	out := new(CreateDummyReply)
	err := c.cc.Invoke(ctx, Dummy_CreateDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyClient) UpdateDummy(ctx context.Context, in *UpdateDummyRequest, opts ...grpc.CallOption) (*UpdateDummyReply, error) {
	out := new(UpdateDummyReply)
	err := c.cc.Invoke(ctx, Dummy_UpdateDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyClient) DeleteDummy(ctx context.Context, in *DeleteDummyRequest, opts ...grpc.CallOption) (*DeleteDummyReply, error) {
	out := new(DeleteDummyReply)
	err := c.cc.Invoke(ctx, Dummy_DeleteDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyClient) GetDummy(ctx context.Context, in *GetDummyRequest, opts ...grpc.CallOption) (*GetDummyReply, error) {
	out := new(GetDummyReply)
	err := c.cc.Invoke(ctx, Dummy_GetDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyClient) ListDummy(ctx context.Context, in *ListDummyRequest, opts ...grpc.CallOption) (*ListDummyReply, error) {
	out := new(ListDummyReply)
	err := c.cc.Invoke(ctx, Dummy_ListDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DummyServer is the server API for Dummy service.
// All implementations must embed UnimplementedDummyServer
// for forward compatibility
type DummyServer interface {
	CreateDummy(context.Context, *CreateDummyRequest) (*CreateDummyReply, error)
	UpdateDummy(context.Context, *UpdateDummyRequest) (*UpdateDummyReply, error)
	DeleteDummy(context.Context, *DeleteDummyRequest) (*DeleteDummyReply, error)
	GetDummy(context.Context, *GetDummyRequest) (*GetDummyReply, error)
	ListDummy(context.Context, *ListDummyRequest) (*ListDummyReply, error)
	mustEmbedUnimplementedDummyServer()
}

// UnimplementedDummyServer must be embedded to have forward compatible implementations.
type UnimplementedDummyServer struct {
}

func (UnimplementedDummyServer) CreateDummy(context.Context, *CreateDummyRequest) (*CreateDummyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDummy not implemented")
}
func (UnimplementedDummyServer) UpdateDummy(context.Context, *UpdateDummyRequest) (*UpdateDummyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDummy not implemented")
}
func (UnimplementedDummyServer) DeleteDummy(context.Context, *DeleteDummyRequest) (*DeleteDummyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDummy not implemented")
}
func (UnimplementedDummyServer) GetDummy(context.Context, *GetDummyRequest) (*GetDummyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDummy not implemented")
}
func (UnimplementedDummyServer) ListDummy(context.Context, *ListDummyRequest) (*ListDummyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDummy not implemented")
}
func (UnimplementedDummyServer) mustEmbedUnimplementedDummyServer() {}

// UnsafeDummyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyServer will
// result in compilation errors.
type UnsafeDummyServer interface {
	mustEmbedUnimplementedDummyServer()
}

func RegisterDummyServer(s grpc.ServiceRegistrar, srv DummyServer) {
	s.RegisterService(&Dummy_ServiceDesc, srv)
}

func _Dummy_CreateDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).CreateDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummy_CreateDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).CreateDummy(ctx, req.(*CreateDummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummy_UpdateDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).UpdateDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummy_UpdateDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).UpdateDummy(ctx, req.(*UpdateDummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummy_DeleteDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).DeleteDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummy_DeleteDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).DeleteDummy(ctx, req.(*DeleteDummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummy_GetDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).GetDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummy_GetDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).GetDummy(ctx, req.(*GetDummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummy_ListDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).ListDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummy_ListDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).ListDummy(ctx, req.(*ListDummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dummy_ServiceDesc is the grpc.ServiceDesc for Dummy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dummy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dummmy.Dummy",
	HandlerType: (*DummyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDummy",
			Handler:    _Dummy_CreateDummy_Handler,
		},
		{
			MethodName: "UpdateDummy",
			Handler:    _Dummy_UpdateDummy_Handler,
		},
		{
			MethodName: "DeleteDummy",
			Handler:    _Dummy_DeleteDummy_Handler,
		},
		{
			MethodName: "GetDummy",
			Handler:    _Dummy_GetDummy_Handler,
		},
		{
			MethodName: "ListDummy",
			Handler:    _Dummy_ListDummy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dummmy/dummy.proto",
}
